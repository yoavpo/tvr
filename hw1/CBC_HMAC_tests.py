import unittest
from os import urandom

from CBC_HMAC import AEAD_AES_128_CBC_HMAC_SHA_256


class TestVectors(unittest.TestCase):
    def test_vector1(self):
        data = b'secret data'
        aad = b'more data'
        mac_key = urandom(16)
        enc_key = urandom(16)
        aead = AEAD_AES_128_CBC_HMAC_SHA_256(mac_key, enc_key)
        nonce = urandom(16)
        ciphertext = aead.authenticated_enc(data, aad, nonce)
        p = aead.authenticated_dec(ciphertext, aad, nonce)

        self.assertEqual(data, p)

    def test_vector2(self):
        data = b"\xef8K\x17c\xb2hp\x1a$\xecS\x86\x9d\xbc\x11j\x01h\x15\xef\xbd,\xfd\xdc\xb4'\xc2\x03\xfa\t\x05\x81\xa3\xdf\xea*{\x8c\xe4\xbcRq\xe1\xfe\xc4\xd7\x12\x93qH\xff\xb8\xd1\x8f\xb8S\xae\xf6\x9c\xc7j{ 67\xfccH\xf4v)\x94\xa6\x14\xf7\xac\x94\xb4?\x1c_\x12Y\x94:Q\x9c\xa0\xd8n\xc6R\xdc\xc7W\xe2\xb0\x1c5"
        aad = b"{ \xff\x1b\xca\x98\xd0\xe5\xa55\xca\xa9\xd2U\x8a8\x90K4\x90\xb2\xfa\xa9?O\x80\xea\xa2\x85\xa2ECMEo(\x1f'\x01\xf1\xa4\xd4J\x9a\xfc\xf3\x89\x93\x86\xcf"
        mac_key = b'\x9e\xdf\xdd\xb1|;\xd4\xbc\xff\x03\xb7\tZy\xef\xeb'
        enc_key = b'\xdfei\xac\x86\xa5U_r\xff\r\x1c\x8d\x02\xac\x97'
        nonce = b'T\xbaS\x87M\x9dn\xca\xe8\xb0\xcfx\x8c@W\x87'
        expected_ciphertext = b"(\xfc.\xea\x17L\xadUez\x7f\xfb\x17V\xea;\xca\xb3\x1fK{\x01\xb4\xfc?&`,\xff3\xb1*\xab\xdf@\xd2o\x04\x9c\x82=9U\x8fJ'\x80\xd9\xc4V\xe3\x15v\xfb\xe2\x02\x13\x10\xf6\xe9\x0b\x17\xd4C1qUB\xd5\xd9\x17\x1b\x9a\xb9{,\x97\xbd\xb997M\xce\x82F\x04z\xa1*\x8a\n\xfb;\xe6|\x18}\x1d\x8f\xadT\x80\x00~k\xf7\xb0=\x8eH\\\xac\x8c\xd1\xb9#\x01m\xbe\xe9\x9b\x82[A\x11\xa2i\xe4"
        aead = AEAD_AES_128_CBC_HMAC_SHA_256(mac_key, enc_key)

        ciphertext = aead.authenticated_enc(data, aad, nonce)
        self.assertEqual(ciphertext, expected_ciphertext)


if __name__ == '__main__':
    unittest.main()
